name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Deploy Backend to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.BACKEND_EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.BACKEND_EC2_SSH_KEY }}
        envs: |
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_SSLMODE=${{ secrets.DB_SSLMODE }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          GCP_PRIVATE_KEY_ID=${{ secrets.GCP_PRIVATE_KEY_ID }}
          GCP_PRIVATE_KEY=${{ secrets.GCP_PRIVATE_KEY }}
          GCP_CLIENT_EMAIL=${{ secrets.GCP_CLIENT_EMAIL }}
          GCP_CLIENT_ID=${{ secrets.GCP_CLIENT_ID }}
          GCP_CLIENT_X509_CERT_URL=${{ secrets.GCP_CLIENT_X509_CERT_URL }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
        script: |
          # Update system and install essential packages
          sudo yum update -y
          sudo yum install -y git wget --allowerasing || sudo yum install -y git wget --skip-broken
          
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
          fi
          
          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Remove existing directory completely and recreate
          rm -rf ~/ai-resume-backend
          mkdir -p ~/ai-resume-backend
          cd ~/ai-resume-backend
          
          # Clone the main branch of the repository using HTTPS (public repo)
          git clone -b main https://github.com/flychicken123/resume_back.git .
          
          # Check if clone was successful
          if [ ! -f "docker-compose.backend.yml" ]; then
            echo "Failed to clone repository or docker-compose file missing"
            exit 1
          fi
          
          # Stop existing containers and force restart
          docker-compose -f docker-compose.backend.yml down || true
          docker system prune -f
          
          # Create external network if it doesn't exist
          docker network create ai-resume-network 2>/dev/null || echo "Network already exists"
          
          # Build and start containers with environment variables
          docker-compose -f docker-compose.backend.yml build --no-cache
          
          # Start containers (environment variables are passed automatically)
          docker-compose -f docker-compose.backend.yml up -d
          
          # Wait for container to be ready
          sleep 10
          
          # Check if container is running
          if ! docker ps | grep -q "ai-resume-backend"; then
            echo "‚ùå Backend container failed to start"
            docker-compose -f docker-compose.backend.yml logs
            exit 1
          fi
          
          echo "‚úÖ Backend deployed successfully"
          
          # Show container logs
          echo "üìã Container logs:"
          docker-compose -f docker-compose.backend.yml logs --tail=20
          
          # Test CORS headers with detailed output
          echo "üß™ Testing CORS headers..."
          sleep 5
          echo "Testing OPTIONS request:"
          curl -v -X OPTIONS -H "Origin: https://www.hihired.org" -H "Access-Control-Request-Method: POST" -H "Access-Control-Request-Headers: Content-Type" https://hihired.org/api/experience/optimize
          
          echo "Testing actual request:"
          curl -v -X POST -H "Origin: https://www.hihired.org" -H "Content-Type: application/json" -d '{"jobDescription": "Software Engineer", "userExperience": "Developed web applications using React and Node.js"}' https://hihired.org/api/experience/optimize
          
          # Clean up
          docker system prune -f 