name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Set up environment variables
      run: |
        echo "Setting up GCP environment variables..."
        echo "GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}" >> $GITHUB_ENV
        echo "GCP_PRIVATE_KEY_ID=${{ secrets.GCP_PRIVATE_KEY_ID }}" >> $GITHUB_ENV
        echo "GCP_PRIVATE_KEY='${{ secrets.GCP_PRIVATE_KEY }}'" >> $GITHUB_ENV
        echo "GCP_CLIENT_EMAIL=${{ secrets.GCP_CLIENT_EMAIL }}" >> $GITHUB_ENV
        echo "GCP_CLIENT_ID=${{ secrets.GCP_CLIENT_ID }}" >> $GITHUB_ENV
        echo "GCP_CLIENT_X509_CERT_URL=${{ secrets.GCP_CLIENT_X509_CERT_URL }}" >> $GITHUB_ENV
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> $GITHUB_ENV
        
    - name: Deploy Backend to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.BACKEND_EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.BACKEND_EC2_SSH_KEY }}
        script: |
          set -Eeuo pipefail
          trap 'echo "❌ Error on line $LINENO"; exit 1' ERR
          
          # Update system and install essential packages
          sudo yum update -y
          sudo yum install -y git wget --allowerasing || sudo yum install -y git wget --skip-broken
          
          # Install Go if not present
          if ! command -v go &> /dev/null; then
            echo "Installing Go..."
            wget https://golang.org/dl/go1.22.0.linux-amd64.tar.gz -O /tmp/go.tar.gz
            sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf /tmp/go.tar.gz
            rm /tmp/go.tar.gz
          fi
          export PATH=$PATH:/usr/local/go/bin
          go version

          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
          fi
          
          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Remove existing directory completely and recreate
          rm -rf ~/ai-resume-backend
          mkdir -p ~/ai-resume-backend
          cd ~/ai-resume-backend
          
          # Clone the main branch of the repository using HTTPS (public repo)
          git clone -b main https://github.com/flychicken123/resume_back.git .
          
          # Check if clone was successful
          if [ ! -f "docker-compose.backend.yml" ]; then
            echo "Failed to clone repository or docker-compose file missing"
            exit 1
          fi
          
          # Create vendor directory to avoid OOM errors during build
          go mod vendor

          # Create .env file for docker-compose (restoring known working approach)
          cat > .env << EOF
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_SSLMODE=${{ secrets.DB_SSLMODE }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          GCP_PRIVATE_KEY_ID=${{ secrets.GCP_PRIVATE_KEY_ID }}
          GCP_PRIVATE_KEY='${{ secrets.GCP_PRIVATE_KEY }}'
          GCP_CLIENT_EMAIL=${{ secrets.GCP_CLIENT_EMAIL }}
          GCP_CLIENT_ID=${{ secrets.GCP_CLIENT_ID }}
          GCP_CLIENT_X509_CERT_URL=${{ secrets.GCP_CLIENT_X509_CERT_URL }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
          EOF

          # Stop existing containers (after .env exists to avoid var-warnings)
          docker-compose -f docker-compose.backend.yml down || true

          # Build and start containers (fail fast if build fails)
          docker network create ai-resume-network || true
          docker-compose -f docker-compose.backend.yml build --no-cache
          docker-compose -f docker-compose.backend.yml up -d
          
          # Clean up
          docker system prune -f 
          
          # Smoke test CORS preflight for common endpoints
          echo "🧪 Testing CORS preflight..."
          sleep 5
          for EP in \
            "/api/auth/register" \
            "/api/auth/login" \
            "/api/auth/logout" \
            "/experience/optimize" \
            "/resume/generate" \
            "/resume/generate-pdf" \
            "/resume/parse" \
            "/ai/education" \
            "/ai/summary" \
            "/api/user/save"; do
            echo "Testing OPTIONS $EP"
            curl -sS -i -X OPTIONS \
              -H "Origin: https://www.hihired.org" \
              -H "Access-Control-Request-Method: POST" \
              https://hihired.org$EP | grep -i "Access-Control-Allow-Origin" || true
          done
          echo "Testing GET preflight for /api/user/load"
          curl -sS -i -X OPTIONS \
            -H "Origin: https://www.hihired.org" \
            -H "Access-Control-Request-Method: GET" \
            https://hihired.org/api/user/load | grep -i "Access-Control-Allow-Origin" || true