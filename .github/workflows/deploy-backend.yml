name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
        
    - name: Deploy Backend to EC2
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_SSLMODE: ${{ secrets.DB_SSLMODE }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_PRIVATE_KEY_ID: ${{ secrets.GCP_PRIVATE_KEY_ID }}
        GCP_PRIVATE_KEY: ${{ secrets.GCP_PRIVATE_KEY }}
        GCP_CLIENT_EMAIL: ${{ secrets.GCP_CLIENT_EMAIL }}
        GCP_CLIENT_ID: ${{ secrets.GCP_CLIENT_ID }}
        GCP_CLIENT_X509_CERT_URL: ${{ secrets.GCP_CLIENT_X509_CERT_URL }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "Creating deployment script..."
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        
        # Update system and install essential packages
        sudo yum update -y
        sudo yum install -y git wget --allowerasing || sudo yum install -y git wget --skip-broken
        
        # Install Docker if not installed
        if ! command -v docker &> /dev/null; then
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker ec2-user
        fi
        
        # Install Docker Compose if not installed
        if ! command -v docker-compose &> /dev/null; then
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # Remove existing directory completely and recreate
        rm -rf ~/ai-resume-backend
        mkdir -p ~/ai-resume-backend
        cd ~/ai-resume-backend
        
        # Clone the main branch of the repository using HTTPS (public repo)
        git clone -b main https://github.com/flychicken123/resume_back.git .
        
        # Create .env file
        cat > .env << 'EOF'
        DB_HOST="${DB_HOST}"
        DB_PORT="${DB_PORT}"
        DB_USER="${DB_USER}"
        DB_PASSWORD="${DB_PASSWORD}"
        DB_NAME="${DB_NAME}"
        DB_SSLMODE="${DB_SSLMODE}"
        JWT_SECRET="${JWT_SECRET}"
        GCP_PROJECT_ID="${GCP_PROJECT_ID}"
        GCP_PRIVATE_KEY_ID="${GCP_PRIVATE_KEY_ID}"
        GCP_PRIVATE_KEY='${GCP_PRIVATE_KEY}'
        GCP_CLIENT_EMAIL="${GCP_CLIENT_EMAIL}"
        GCP_CLIENT_ID="${GCP_CLIENT_ID}"
        GCP_CLIENT_X509_CERT_URL="${GCP_CLIENT_X509_CERT_URL}"
        GEMINI_API_KEY="${GEMINI_API_KEY}"
        EOF
        
        # Create external network if it doesn't exist
        docker network create ai-resume-network 2>/dev/null || echo "Network already exists"
        
        # Build and start containers
        docker-compose -f docker-compose.backend.yml build --no-cache
        docker-compose -f docker-compose.backend.yml up -d
        EOL
        
        # Make script executable
        chmod +x deploy.sh
        
        # Copy script to server
        scp -o StrictHostKeyChecking=no -i ${{ secrets.BACKEND_EC2_SSH_KEY }} deploy.sh ec2-user@${{ secrets.BACKEND_EC2_HOST }}:~/deploy.sh
        
        # Run script on server
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.BACKEND_EC2_SSH_KEY }} ec2-user@${{ secrets.BACKEND_EC2_HOST }} "~/deploy.sh" 